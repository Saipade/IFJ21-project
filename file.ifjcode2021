.IFJcode21
DEFVAR GF@%tmp0
DEFVAR GF@%tmp1
DEFVAR GF@%tmp2
DEFVAR GF@%expResult
JUMP $over$reads

# Function reads
LABEL $reads
PUSHFRAME
DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 nil@nil
READ LF@%1%retval0 string
LABEL $reads$ret
POPFRAME
RETURN

LABEL $over$reads

JUMP $over$readi

# Function readi
LABEL $readi
PUSHFRAME
DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 nil@nil
READ LF@%1%retval0 int
LABEL $readi$ret
POPFRAME
RETURN

LABEL $over$readi

JUMP $over$readn

# Function readn
LABEL $readn
PUSHFRAME
DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 nil@nil
READ LF@%1%retval0 float
LABEL $readn$ret
POPFRAME
RETURN

LABEL $over$readn

JUMP $over$write

# Function write
LABEL $write
PUSHFRAME
JUMPIFEQ $write$nil LF@%0 nil@nil
WRITE LF@%0
JUMP $write$ret
LABEL $write$nil
WRITE string@nil
LABEL $write$ret
POPFRAME
RETURN

LABEL $over$write

JUMP $over$tointeger

# Function tointeger
LABEL $tointeger
PUSHFRAME
DEFVAR LF@%1%retval0
DEFVAR LF@%nilcheck
EQ LF@%nilcheck LF@%0 nil@nil
JUMPIFEQ $tointeger$nil LF@%nilcheck bool@true
FLOAT2INT LF@%1%retval0 LF@%0
JUMP $tointeger$ret
LABEL $tointeger$nil
MOVE LF@%1%retval0 nil@nil
LABEL $tointeger$ret
POPFRAME
RETURN

LABEL $over$tointeger

JUMP $over$substr

# Function substr
LABEL $substr
PUSHFRAME
DEFVAR LF@%s
MOVE LF@%s LF@%0
DEFVAR LF@%i
MOVE LF@%i LF@%1
DEFVAR LF@%j
MOVE LF@%j LF@%2
DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 string@ 
DEFVAR LF@%check
MOVE LF@%check bool@false
EQ LF@%check LF@%s nil@nil
JUMPIFEQ $substr$err8 LF@%check bool@true
EQ LF@%check LF@%i nil@nil
JUMPIFEQ $substr$err8 LF@%check bool@true
EQ LF@%check LF@%j nil@nil
JUMPIFEQ $substr$err8 LF@%check bool@true
GT LF@%check LF@%i LF@%j
JUMPIFEQ $substr$emptystr LF@%check bool@true
DEFVAR LF@%strlen
STRLEN LF@%strlen LF@%s
GT LF@%check LF@%i LF@%strlen
JUMPIFEQ $substr$emptystr LF@%check bool@true
GT LF@%check int@1 LF@%i
JUMPIFEQ $substr$emptystr LF@%check bool@true
GT LF@%check LF@%j LF@%strlen
JUMPIFEQ $substr$emptystr LF@%check bool@true
GT LF@%check int@1 LF@%j
JUMPIFEQ $substr$emptystr LF@%check bool@true
DEFVAR LF@%char
SUB LF@%i LF@%i int@1
SUB LF@%j LF@%j int@1
LABEL $substr$loop
GETCHAR LF@%char LF@%s LF@%i
CONCAT LF@%1%retval0 LF@%1%retval0 LF@%char
ADD LF@%i LF@%i int@1
GT LF@%check LF@%i LF@%j
JUMPIFEQ $substr$ret LF@%check bool@true
JUMP $substr$loop
LABEL $substr$emptystr
MOVE LF@%1%retval0 string@ 
JUMP $substr$ret
LABEL $substr$err8
EXIT int@8
LABEL $substr$ret
POPFRAME
RETURN

LABEL $over$substr

JUMP $over$ord

# Function ord
LABEL $ord
PUSHFRAME
DEFVAR LF@%s
MOVE LF@%s LF@%0
DEFVAR LF@%i
MOVE LF@%i LF@%1
DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 nil@nil
DEFVAR LF@%check
MOVE LF@%check bool@false
EQ LF@%check LF@%s nil@nil
JUMPIFEQ $ord$err8 LF@%check bool@true
EQ LF@%check LF@%i nil@nil
JUMPIFEQ $ord$err8 LF@%check bool@true
DEFVAR LF@%strlen
STRLEN LF@%strlen LF@%s
GT LF@%check LF@%i LF@%strlen
JUMPIFEQ $substr$emptystr LF@%check bool@true
GT LF@%check int@1 LF@%i
JUMPIFEQ $substr$emptystr LF@%check bool@true
SUB LF@%i LF@%i int@1
STRI2INT LF@%1%retval0 LF@%s LF@%i
JUMP $ord$ret
LABEL $ord$emptystr
MOVE LF@%1%retval0 nil@nil
JUMP $ord$ret
LABEL $ord$err8
EXIT int@8
LABEL $ord$ret
POPFRAME
RETURN

LABEL $over$ord

JUMP $over$chr

# Function chr
LABEL $chr
PUSHFRAME
DEFVAR LF@%i
MOVE LF@%i LF@%0
DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 nil@nil
DEFVAR LF@%check
MOVE LF@%check bool@false
EQ LF@%check LF@%i nil@nil
JUMPIFEQ $chr$err8 LF@%check bool@true
GT LF@%check LF@%i int@255
JUMPIFEQ $chr$ret LF@%check bool@true
GT LF@%check int@0 LF@%i
JUMPIFEQ $chr$ret LF@%check bool@true
INT2CHAR LF@%1%retval0 LF@%i
JUMP $ord$ret
LABEL $chr$err8
EXIT int@8
LABEL $chr$ret
POPFRAME
RETURN

LABEL $over$chr

DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 nil@nil

JUMP $over$main

# Function main:

LABEL $main
PUSHFRAME
DEFVAR LF@%1%a
MOVE LF@%1%a string@
CREATEFRAME
DEFVAR TF@%0
MOVE TF@%0 string@hello
CALL $foo
MOVE LF@%1%a TF@%1%retval0
PUSHS LF@%1%a
POPS GF@%expResult
CREATEFRAME
DEFVAR TF@%0
MOVE TF@%0 GF@%expResult
CALL $write
PUSHS string@\010
POPS GF@%expResult
CREATEFRAME
DEFVAR TF@%0
MOVE TF@%0 GF@%expResult
CALL $write
LABEL $main$ret
POPFRAME
RETURN

# End of function main

LABEL $over$main


JUMP $over$foo

# Function foo:

LABEL $foo
PUSHFRAME
DEFVAR LF@%1%str
MOVE LF@%1%str LF@%0
DEFVAR LF@%1%retval0
MOVE LF@%1%retval0 nil@nil
PUSHS LF@%1%str
PUSHS string@\032there
POPS GF@%tmp0
POPS GF@%tmp1
CONCAT GF@%tmp1 GF@%tmp1 GF@%tmp0
PUSHS GF@%tmp1
POPS GF@%expResult
MOVE LF@%1%retval0 GF@%expResult
JUMP $foo$ret
LABEL $foo$ret
POPFRAME
RETURN

# End of function foo

LABEL $over$foo

CREATEFRAME
CALL $main
